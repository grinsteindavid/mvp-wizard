# React Web App Best Practices


## Complexity Management
- Keep cyclomatic complexity under 10 for functions
- Use early returns to avoid deep nesting
- Limit function parameters to 3 or fewer
- Break complex functions into smaller, focused ones
- Avoid nested ternary operators
- Limit nesting to 3 levels or less
- Prefer composition over inheritance
- Use destructuring for cleaner code
- Implement pure functions where possible
- Document complex algorithms with clear comments
- Avoid premature optimization
- Use named constants instead of magic numbers
- Follow the DRY principle judiciously
- Create abstraction layers for complex operations
- Use meaningful variable and function names
- DO NOT create files for examples
- Avoid hard-coding variables, functions, or logic that is too specific and not reusable


## Component Structure
- Follow Single Responsibility Principle: each component should do one thing well
- Create small, reusable components with clear interfaces
- Separate presentational and container components
- Use presentational (dumb) components that only render UI based on props for better testability
- Create container (smart) components that manage state and pass data to presentational components
- Use React hooks for stateful logic
- Keep component files under 300 lines of code

## File Organization
- Group by feature or route instead of type
- Use index.js files for cleaner imports
- Consistent naming conventions (PascalCase for components)
- Keep related files close to each other
- Organize CSS/styled-components near their components
- Separate utilities, schemas, and services into dedicated directories
- Each component or module has its own test file in the same directory
  Example:
  ```
  src/
  ├── components/
  │    ├── Button/
  │    │    ├── Button.tsx
  │    │    ├── Button.test.tsx  // Unit test
  │    │    ├── Button.module.css
  
- Use barrel exports for cleaner imports

## Code Separation
- Utils: Pure functions for data manipulation and calculations
- Schemas: Validation schemas separate from components
- Services: API calls and external integrations
- Hooks: Custom hooks for reusable stateful logic
- Constants: Application-wide constants and configuration
- Types: TypeScript interfaces and type definitions
- Styles: Theme configurations and global styles
- Tests: Unit tests, integration tests, and E2E tests

## Performance Optimization
- Use React.memo for pure functional components
- React Hook "useMemo" is should not be called conditionally
- Implement useCallback for event handlers passed to child components
- Apply useMemo for expensive calculations
- Use lazy loading and code splitting with React.lazy() and Suspense
- Virtualize long lists with react-window or react-virtualized
- Implement proper key usage in lists
- Avoid unnecessary re-renders by managing state properly
- Use web workers for CPU-intensive tasks
- Implement proper code splitting by routes and features
- Be mindful of potential memory overhead
- Avoid console.log statements in production code
- Use console.log statements for debugging and development environment only
- Be conscious of performance implications when using timers
- Timers can create race conditions and unexpected behavior
- Be aware of stale closures/references in React, especially in complex array forms
  - Functions in event handlers may capture outdated state/props values
  - Use useRef for mutable references that don't trigger re-renders
  - Include dependencies in useEffect/useCallback dependency arrays
  - Be cautious with closures in array mapping functions
  - Properly key array items to ensure correct component identity
  - Consider using function form of setState: setState(prev => newState)

## State Management
- Use Context API for global state that changes infrequently
- Consider Redux for complex state with many updates
- Keep state as local as possible
- Normalize complex state objects
- Use immutable state updates
- Implement state machines for complex UI flows
- Consider using Redux Toolkit for simpler Redux setup

## Form Handling & Validation
- Implement Joi validations in a separate validation service
- Create reusable validation schemas
- Validate both client-side and server-side
- Use Formik or react-hook-form for complex forms
- Provide immediate feedback for validation errors
- Debounce validation for better UX
- Separate form logic from UI components

## Styling
- Use CSS-in-JS (styled-components) for component-scoped styles
- Implement a consistent theme system
- Create a design system with reusable UI components
- Use CSS variables for theme values
- Consider responsive design from the start
- Implement dark mode and accessibility themes
- Create mixins for common style patterns

## Testing
- Test React.memo implementation, to check if it's preventing re-renders as it would in a real implementation.
- Write unit tests for utility functions
- Test components with React Testing Library
- Focus on testing behavior, not implementation
- Implement integration tests for critical user flows
- Use mock service workers for API testing
- Maintain high test coverage for critical paths
- Create test utilities for common testing patterns
- Implement E2E tests with playwright for critical paths
- We are using SWC/JEST and it has conflicts with spyOn
- Add data-testid attributes to components for reliable test selection

## Build & Deployment
- Optimize bundle size with code splitting
- Enable tree shaking
- Set up proper caching strategies
- Implement CI/CD pipelines
- Use environment variables for configuration
- Implement feature flags for controlled rollouts
- Configure proper error monitoring and logging
- Use CDN for static assets

## Accessibility
- Ensure proper semantic HTML
- Implement keyboard navigation
- Add ARIA attributes where needed
- Test with screen readers
- Maintain sufficient color contrast
- Support reduced motion preferences
- Implement focus management for modals and dialogs
- Create accessible form components

## UI/UX Component Best Practices

### User Flow Design
- Map out complete user journeys before implementation
- Minimize steps required to complete primary tasks
- Provide clear progress indicators for multi-step processes
- Maintain consistent navigation patterns throughout the app
- Design intuitive paths to help users achieve their goals

### Feedback & Communication
- Provide immediate feedback for all user actions
- Use toast notifications for non-critical updates
- Implement inline validation with helpful error messages
- Show loading states for operations taking longer than 300ms
- Communicate system status clearly (success, error, loading)
- Use skeleton screens instead of spinners when possible

### Form Design
- Group related fields logically
- Implement smart defaults to reduce user effort
- Use appropriate input types for data being collected
- Validate inputs in real-time with helpful guidance
- Support keyboard navigation and tab order
- Preserve user input when validation fails

### Error Handling
- Prevent errors with constraints and guidance
- Provide clear recovery paths when errors occur
- Use human-friendly error messages (avoid technical jargon)
- Implement forgiving formatting for inputs (phone numbers, dates)
- Design for edge cases and empty states

### Performance Perception
- Prioritize perceived performance over actual performance
- Implement optimistic UI updates for common actions
- Use progressive loading for complex data visualizations
- Cache frequently accessed data for instant retrieval
- Prefetch likely next actions to reduce waiting time


### Visual Hierarchy
- Use consistent spacing system (4px, 8px, 16px, 24px, 32px, 48px, 64px)
- Implement clear visual hierarchy with font sizes and weights
- Maintain proper alignment (left-align text, right-align numbers)
- Use whitespace effectively to create breathing room
- Limit color palette to 3 primary colors with light/dark variants
- Ensure text has sufficient contrast (WCAG AA minimum)
- Design for all viewport sizes with responsive breakpoints

### Interactive Elements
- Provide clear hover/focus/active states for all interactive elements
- Implement loading states for asynchronous operations
- Design empty states for lists and data displays
- Create meaningful error states with actionable guidance
- Use micro-interactions to provide feedback (animations < 300ms)
- Maintain touch target size of at least 44×44px for mobile

### Animation & Transitions
- Keep animations subtle and purposeful
- Use transitions for state changes (150-300ms duration)
- Implement reduced motion options for accessibility
- Avoid animations that could trigger vestibular disorders
- Use spring physics for natural-feeling animations

### Component Design
- Create self-contained components with clear boundaries
- Design components to be composable and flexible
- Implement consistent prop patterns across component library
- Provide sensible defaults while allowing customization

### Artistic Style
✅ Dark, high-tech UI with neon glows
✅ Grid-based layouts with a structured, tactical feel
✅ Futuristic fonts and sharp, metallic textures
✅ Cinematic and faction-based artwork

